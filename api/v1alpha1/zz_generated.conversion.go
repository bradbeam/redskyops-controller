// +build !ignore_autogenerated

/*
Copyright 2020 GramLabs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	experiment "github.com/redskyops/redskyops-controller/internal/experiment"
	trial "github.com/redskyops/redskyops-controller/internal/trial"
	v1 "k8s.io/api/core/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Assignment)(nil), (*trial.Assignment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Assignment_To_trial_Assignment(a.(*Assignment), b.(*trial.Assignment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.Assignment)(nil), (*Assignment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_Assignment_To_v1alpha1_Assignment(a.(*trial.Assignment), b.(*Assignment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ConfigMapHelmValuesFromSource)(nil), (*trial.ConfigMapHelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource(a.(*ConfigMapHelmValuesFromSource), b.(*trial.ConfigMapHelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.ConfigMapHelmValuesFromSource)(nil), (*ConfigMapHelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(a.(*trial.ConfigMapHelmValuesFromSource), b.(*ConfigMapHelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Constraint)(nil), (*experiment.Constraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Constraint_To_experiment_Constraint(a.(*Constraint), b.(*experiment.Constraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.Constraint)(nil), (*Constraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_Constraint_To_v1alpha1_Constraint(a.(*experiment.Constraint), b.(*Constraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExperimentSpec)(nil), (*experiment.ExperimentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentSpec_To_experiment_ExperimentSpec(a.(*ExperimentSpec), b.(*experiment.ExperimentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.ExperimentSpec)(nil), (*ExperimentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_ExperimentSpec_To_v1alpha1_ExperimentSpec(a.(*experiment.ExperimentSpec), b.(*ExperimentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ExperimentStatus)(nil), (*experiment.ExperimentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ExperimentStatus_To_experiment_ExperimentStatus(a.(*ExperimentStatus), b.(*experiment.ExperimentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.ExperimentStatus)(nil), (*ExperimentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_ExperimentStatus_To_v1alpha1_ExperimentStatus(a.(*experiment.ExperimentStatus), b.(*ExperimentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValue)(nil), (*trial.HelmValue)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValue_To_trial_HelmValue(a.(*HelmValue), b.(*trial.HelmValue), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.HelmValue)(nil), (*HelmValue)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_HelmValue_To_v1alpha1_HelmValue(a.(*trial.HelmValue), b.(*HelmValue), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValueSource)(nil), (*trial.HelmValueSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValueSource_To_trial_HelmValueSource(a.(*HelmValueSource), b.(*trial.HelmValueSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.HelmValueSource)(nil), (*HelmValueSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_HelmValueSource_To_v1alpha1_HelmValueSource(a.(*trial.HelmValueSource), b.(*HelmValueSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*HelmValuesFromSource)(nil), (*trial.HelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource(a.(*HelmValuesFromSource), b.(*trial.HelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.HelmValuesFromSource)(nil), (*HelmValuesFromSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(a.(*trial.HelmValuesFromSource), b.(*HelmValuesFromSource), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Metric)(nil), (*experiment.Metric)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Metric_To_experiment_Metric(a.(*Metric), b.(*experiment.Metric), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.Metric)(nil), (*Metric)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_Metric_To_v1alpha1_Metric(a.(*experiment.Metric), b.(*Metric), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*NamespaceTemplateSpec)(nil), (*experiment.NamespaceTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec(a.(*NamespaceTemplateSpec), b.(*experiment.NamespaceTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.NamespaceTemplateSpec)(nil), (*NamespaceTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(a.(*experiment.NamespaceTemplateSpec), b.(*NamespaceTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Optimization)(nil), (*experiment.Optimization)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Optimization_To_experiment_Optimization(a.(*Optimization), b.(*experiment.Optimization), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.Optimization)(nil), (*Optimization)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_Optimization_To_v1alpha1_Optimization(a.(*experiment.Optimization), b.(*Optimization), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*OrderConstraint)(nil), (*experiment.OrderConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint(a.(*OrderConstraint), b.(*experiment.OrderConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.OrderConstraint)(nil), (*OrderConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint(a.(*experiment.OrderConstraint), b.(*OrderConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Parameter)(nil), (*experiment.Parameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Parameter_To_experiment_Parameter(a.(*Parameter), b.(*experiment.Parameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.Parameter)(nil), (*Parameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_Parameter_To_v1alpha1_Parameter(a.(*experiment.Parameter), b.(*Parameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ParameterSelector)(nil), (*trial.ParameterSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ParameterSelector_To_trial_ParameterSelector(a.(*ParameterSelector), b.(*trial.ParameterSelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.ParameterSelector)(nil), (*ParameterSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_ParameterSelector_To_v1alpha1_ParameterSelector(a.(*trial.ParameterSelector), b.(*ParameterSelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchOperation)(nil), (*trial.PatchOperation)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchOperation_To_trial_PatchOperation(a.(*PatchOperation), b.(*trial.PatchOperation), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.PatchOperation)(nil), (*PatchOperation)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_PatchOperation_To_v1alpha1_PatchOperation(a.(*trial.PatchOperation), b.(*PatchOperation), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchReadinessGate)(nil), (*experiment.PatchReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate(a.(*PatchReadinessGate), b.(*experiment.PatchReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.PatchReadinessGate)(nil), (*PatchReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(a.(*experiment.PatchReadinessGate), b.(*PatchReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PatchTemplate)(nil), (*experiment.PatchTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate(a.(*PatchTemplate), b.(*experiment.PatchTemplate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.PatchTemplate)(nil), (*PatchTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate(a.(*experiment.PatchTemplate), b.(*PatchTemplate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ReadinessCheck)(nil), (*trial.ReadinessCheck)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck(a.(*ReadinessCheck), b.(*trial.ReadinessCheck), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.ReadinessCheck)(nil), (*ReadinessCheck)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck(a.(*trial.ReadinessCheck), b.(*ReadinessCheck), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SetupTask)(nil), (*trial.SetupTask)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SetupTask_To_trial_SetupTask(a.(*SetupTask), b.(*trial.SetupTask), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.SetupTask)(nil), (*SetupTask)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_SetupTask_To_v1alpha1_SetupTask(a.(*trial.SetupTask), b.(*SetupTask), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SumConstraint)(nil), (*experiment.SumConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SumConstraint_To_experiment_SumConstraint(a.(*SumConstraint), b.(*experiment.SumConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.SumConstraint)(nil), (*SumConstraint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_SumConstraint_To_v1alpha1_SumConstraint(a.(*experiment.SumConstraint), b.(*SumConstraint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SumConstraintParameter)(nil), (*experiment.SumConstraintParameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter(a.(*SumConstraintParameter), b.(*experiment.SumConstraintParameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.SumConstraintParameter)(nil), (*SumConstraintParameter)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(a.(*experiment.SumConstraintParameter), b.(*SumConstraintParameter), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialCondition)(nil), (*trial.TrialCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialCondition_To_trial_TrialCondition(a.(*TrialCondition), b.(*trial.TrialCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.TrialCondition)(nil), (*TrialCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_TrialCondition_To_v1alpha1_TrialCondition(a.(*trial.TrialCondition), b.(*TrialCondition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialReadinessGate)(nil), (*trial.TrialReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate(a.(*TrialReadinessGate), b.(*trial.TrialReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.TrialReadinessGate)(nil), (*TrialReadinessGate)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(a.(*trial.TrialReadinessGate), b.(*TrialReadinessGate), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialSpec)(nil), (*trial.TrialSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialSpec_To_trial_TrialSpec(a.(*TrialSpec), b.(*trial.TrialSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.TrialSpec)(nil), (*TrialSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_TrialSpec_To_v1alpha1_TrialSpec(a.(*trial.TrialSpec), b.(*TrialSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialStatus)(nil), (*trial.TrialStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialStatus_To_trial_TrialStatus(a.(*TrialStatus), b.(*trial.TrialStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.TrialStatus)(nil), (*TrialStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_TrialStatus_To_v1alpha1_TrialStatus(a.(*trial.TrialStatus), b.(*TrialStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TrialTemplateSpec)(nil), (*experiment.TrialTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec(a.(*TrialTemplateSpec), b.(*experiment.TrialTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*experiment.TrialTemplateSpec)(nil), (*TrialTemplateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(a.(*experiment.TrialTemplateSpec), b.(*TrialTemplateSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Value)(nil), (*trial.Value)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Value_To_trial_Value(a.(*Value), b.(*trial.Value), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*trial.Value)(nil), (*Value)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_trial_Value_To_v1alpha1_Value(a.(*trial.Value), b.(*Value), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_Assignment_To_trial_Assignment(in *Assignment, out *trial.Assignment, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1alpha1_Assignment_To_trial_Assignment is an autogenerated conversion function.
func Convert_v1alpha1_Assignment_To_trial_Assignment(in *Assignment, out *trial.Assignment, s conversion.Scope) error {
	return autoConvert_v1alpha1_Assignment_To_trial_Assignment(in, out, s)
}

func autoConvert_trial_Assignment_To_v1alpha1_Assignment(in *trial.Assignment, out *Assignment, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_trial_Assignment_To_v1alpha1_Assignment is an autogenerated conversion function.
func Convert_trial_Assignment_To_v1alpha1_Assignment(in *trial.Assignment, out *Assignment, s conversion.Scope) error {
	return autoConvert_trial_Assignment_To_v1alpha1_Assignment(in, out, s)
}

func autoConvert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource(in *ConfigMapHelmValuesFromSource, out *trial.ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	out.LocalObjectReference = in.LocalObjectReference
	return nil
}

// Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource is an autogenerated conversion function.
func Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource(in *ConfigMapHelmValuesFromSource, out *trial.ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource(in, out, s)
}

func autoConvert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in *trial.ConfigMapHelmValuesFromSource, out *ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	out.LocalObjectReference = in.LocalObjectReference
	return nil
}

// Convert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource is an autogenerated conversion function.
func Convert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in *trial.ConfigMapHelmValuesFromSource, out *ConfigMapHelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(in, out, s)
}

func autoConvert_v1alpha1_Constraint_To_experiment_Constraint(in *Constraint, out *experiment.Constraint, s conversion.Scope) error {
	out.Name = in.Name
	if in.Order != nil {
		in, out := &in.Order, &out.Order
		*out = new(experiment.OrderConstraint)
		if err := Convert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Order = nil
	}
	if in.Sum != nil {
		in, out := &in.Sum, &out.Sum
		*out = new(experiment.SumConstraint)
		if err := Convert_v1alpha1_SumConstraint_To_experiment_SumConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Sum = nil
	}
	return nil
}

// Convert_v1alpha1_Constraint_To_experiment_Constraint is an autogenerated conversion function.
func Convert_v1alpha1_Constraint_To_experiment_Constraint(in *Constraint, out *experiment.Constraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_Constraint_To_experiment_Constraint(in, out, s)
}

func autoConvert_experiment_Constraint_To_v1alpha1_Constraint(in *experiment.Constraint, out *Constraint, s conversion.Scope) error {
	out.Name = in.Name
	if in.Order != nil {
		in, out := &in.Order, &out.Order
		*out = new(OrderConstraint)
		if err := Convert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Order = nil
	}
	if in.Sum != nil {
		in, out := &in.Sum, &out.Sum
		*out = new(SumConstraint)
		if err := Convert_experiment_SumConstraint_To_v1alpha1_SumConstraint(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Sum = nil
	}
	return nil
}

// Convert_experiment_Constraint_To_v1alpha1_Constraint is an autogenerated conversion function.
func Convert_experiment_Constraint_To_v1alpha1_Constraint(in *experiment.Constraint, out *Constraint, s conversion.Scope) error {
	return autoConvert_experiment_Constraint_To_v1alpha1_Constraint(in, out, s)
}

func autoConvert_v1alpha1_ExperimentSpec_To_experiment_ExperimentSpec(in *ExperimentSpec, out *experiment.ExperimentSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	if in.Optimization != nil {
		in, out := &in.Optimization, &out.Optimization
		*out = make([]experiment.Optimization, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Optimization_To_experiment_Optimization(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Optimization = nil
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]experiment.Parameter, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Parameter_To_experiment_Parameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	if in.Constraints != nil {
		in, out := &in.Constraints, &out.Constraints
		*out = make([]experiment.Constraint, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Constraint_To_experiment_Constraint(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Constraints = nil
	}
	if in.Metrics != nil {
		in, out := &in.Metrics, &out.Metrics
		*out = make([]experiment.Metric, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Metric_To_experiment_Metric(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Metrics = nil
	}
	if in.Patches != nil {
		in, out := &in.Patches, &out.Patches
		*out = make([]experiment.PatchTemplate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Patches = nil
	}
	out.NamespaceSelector = in.NamespaceSelector
	if in.NamespaceTemplate != nil {
		in, out := &in.NamespaceTemplate, &out.NamespaceTemplate
		*out = new(experiment.NamespaceTemplateSpec)
		if err := Convert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NamespaceTemplate = nil
	}
	out.Selector = in.Selector
	if err := Convert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec(&in.Template, &out.Template, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ExperimentSpec_To_experiment_ExperimentSpec is an autogenerated conversion function.
func Convert_v1alpha1_ExperimentSpec_To_experiment_ExperimentSpec(in *ExperimentSpec, out *experiment.ExperimentSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExperimentSpec_To_experiment_ExperimentSpec(in, out, s)
}

func autoConvert_experiment_ExperimentSpec_To_v1alpha1_ExperimentSpec(in *experiment.ExperimentSpec, out *ExperimentSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	if in.Optimization != nil {
		in, out := &in.Optimization, &out.Optimization
		*out = make([]Optimization, len(*in))
		for i := range *in {
			if err := Convert_experiment_Optimization_To_v1alpha1_Optimization(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Optimization = nil
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]Parameter, len(*in))
		for i := range *in {
			if err := Convert_experiment_Parameter_To_v1alpha1_Parameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	if in.Constraints != nil {
		in, out := &in.Constraints, &out.Constraints
		*out = make([]Constraint, len(*in))
		for i := range *in {
			if err := Convert_experiment_Constraint_To_v1alpha1_Constraint(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Constraints = nil
	}
	if in.Metrics != nil {
		in, out := &in.Metrics, &out.Metrics
		*out = make([]Metric, len(*in))
		for i := range *in {
			if err := Convert_experiment_Metric_To_v1alpha1_Metric(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Metrics = nil
	}
	if in.Patches != nil {
		in, out := &in.Patches, &out.Patches
		*out = make([]PatchTemplate, len(*in))
		for i := range *in {
			if err := Convert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Patches = nil
	}
	out.NamespaceSelector = in.NamespaceSelector
	if in.NamespaceTemplate != nil {
		in, out := &in.NamespaceTemplate, &out.NamespaceTemplate
		*out = new(NamespaceTemplateSpec)
		if err := Convert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NamespaceTemplate = nil
	}
	out.Selector = in.Selector
	if err := Convert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(&in.Template, &out.Template, s); err != nil {
		return err
	}
	return nil
}

// Convert_experiment_ExperimentSpec_To_v1alpha1_ExperimentSpec is an autogenerated conversion function.
func Convert_experiment_ExperimentSpec_To_v1alpha1_ExperimentSpec(in *experiment.ExperimentSpec, out *ExperimentSpec, s conversion.Scope) error {
	return autoConvert_experiment_ExperimentSpec_To_v1alpha1_ExperimentSpec(in, out, s)
}

func autoConvert_v1alpha1_ExperimentStatus_To_experiment_ExperimentStatus(in *ExperimentStatus, out *experiment.ExperimentStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ActiveTrials = in.ActiveTrials
	return nil
}

// Convert_v1alpha1_ExperimentStatus_To_experiment_ExperimentStatus is an autogenerated conversion function.
func Convert_v1alpha1_ExperimentStatus_To_experiment_ExperimentStatus(in *ExperimentStatus, out *experiment.ExperimentStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExperimentStatus_To_experiment_ExperimentStatus(in, out, s)
}

func autoConvert_experiment_ExperimentStatus_To_v1alpha1_ExperimentStatus(in *experiment.ExperimentStatus, out *ExperimentStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.ActiveTrials = in.ActiveTrials
	return nil
}

// Convert_experiment_ExperimentStatus_To_v1alpha1_ExperimentStatus is an autogenerated conversion function.
func Convert_experiment_ExperimentStatus_To_v1alpha1_ExperimentStatus(in *experiment.ExperimentStatus, out *ExperimentStatus, s conversion.Scope) error {
	return autoConvert_experiment_ExperimentStatus_To_v1alpha1_ExperimentStatus(in, out, s)
}

func autoConvert_v1alpha1_HelmValue_To_trial_HelmValue(in *HelmValue, out *trial.HelmValue, s conversion.Scope) error {
	out.Name = in.Name
	out.ForceString = in.ForceString
	out.Value = in.Value
	if in.ValueFrom != nil {
		in, out := &in.ValueFrom, &out.ValueFrom
		*out = new(trial.HelmValueSource)
		if err := Convert_v1alpha1_HelmValueSource_To_trial_HelmValueSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ValueFrom = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValue_To_trial_HelmValue is an autogenerated conversion function.
func Convert_v1alpha1_HelmValue_To_trial_HelmValue(in *HelmValue, out *trial.HelmValue, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValue_To_trial_HelmValue(in, out, s)
}

func autoConvert_trial_HelmValue_To_v1alpha1_HelmValue(in *trial.HelmValue, out *HelmValue, s conversion.Scope) error {
	out.Name = in.Name
	out.ForceString = in.ForceString
	out.Value = in.Value
	if in.ValueFrom != nil {
		in, out := &in.ValueFrom, &out.ValueFrom
		*out = new(HelmValueSource)
		if err := Convert_trial_HelmValueSource_To_v1alpha1_HelmValueSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ValueFrom = nil
	}
	return nil
}

// Convert_trial_HelmValue_To_v1alpha1_HelmValue is an autogenerated conversion function.
func Convert_trial_HelmValue_To_v1alpha1_HelmValue(in *trial.HelmValue, out *HelmValue, s conversion.Scope) error {
	return autoConvert_trial_HelmValue_To_v1alpha1_HelmValue(in, out, s)
}

func autoConvert_v1alpha1_HelmValueSource_To_trial_HelmValueSource(in *HelmValueSource, out *trial.HelmValueSource, s conversion.Scope) error {
	if in.ParameterRef != nil {
		in, out := &in.ParameterRef, &out.ParameterRef
		*out = new(trial.ParameterSelector)
		if err := Convert_v1alpha1_ParameterSelector_To_trial_ParameterSelector(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ParameterRef = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValueSource_To_trial_HelmValueSource is an autogenerated conversion function.
func Convert_v1alpha1_HelmValueSource_To_trial_HelmValueSource(in *HelmValueSource, out *trial.HelmValueSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValueSource_To_trial_HelmValueSource(in, out, s)
}

func autoConvert_trial_HelmValueSource_To_v1alpha1_HelmValueSource(in *trial.HelmValueSource, out *HelmValueSource, s conversion.Scope) error {
	if in.ParameterRef != nil {
		in, out := &in.ParameterRef, &out.ParameterRef
		*out = new(ParameterSelector)
		if err := Convert_trial_ParameterSelector_To_v1alpha1_ParameterSelector(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ParameterRef = nil
	}
	return nil
}

// Convert_trial_HelmValueSource_To_v1alpha1_HelmValueSource is an autogenerated conversion function.
func Convert_trial_HelmValueSource_To_v1alpha1_HelmValueSource(in *trial.HelmValueSource, out *HelmValueSource, s conversion.Scope) error {
	return autoConvert_trial_HelmValueSource_To_v1alpha1_HelmValueSource(in, out, s)
}

func autoConvert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource(in *HelmValuesFromSource, out *trial.HelmValuesFromSource, s conversion.Scope) error {
	if in.ConfigMap != nil {
		in, out := &in.ConfigMap, &out.ConfigMap
		*out = new(trial.ConfigMapHelmValuesFromSource)
		if err := Convert_v1alpha1_ConfigMapHelmValuesFromSource_To_trial_ConfigMapHelmValuesFromSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ConfigMap = nil
	}
	return nil
}

// Convert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource is an autogenerated conversion function.
func Convert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource(in *HelmValuesFromSource, out *trial.HelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource(in, out, s)
}

func autoConvert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in *trial.HelmValuesFromSource, out *HelmValuesFromSource, s conversion.Scope) error {
	if in.ConfigMap != nil {
		in, out := &in.ConfigMap, &out.ConfigMap
		*out = new(ConfigMapHelmValuesFromSource)
		if err := Convert_trial_ConfigMapHelmValuesFromSource_To_v1alpha1_ConfigMapHelmValuesFromSource(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ConfigMap = nil
	}
	return nil
}

// Convert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource is an autogenerated conversion function.
func Convert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in *trial.HelmValuesFromSource, out *HelmValuesFromSource, s conversion.Scope) error {
	return autoConvert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(in, out, s)
}

func autoConvert_v1alpha1_Metric_To_experiment_Metric(in *Metric, out *experiment.Metric, s conversion.Scope) error {
	out.Name = in.Name
	out.Minimize = in.Minimize
	out.Type = experiment.MetricType(in.Type)
	out.Query = in.Query
	out.ErrorQuery = in.ErrorQuery
	out.Scheme = in.Scheme
	out.Selector = in.Selector
	out.Port = in.Port
	out.Path = in.Path
	return nil
}

// Convert_v1alpha1_Metric_To_experiment_Metric is an autogenerated conversion function.
func Convert_v1alpha1_Metric_To_experiment_Metric(in *Metric, out *experiment.Metric, s conversion.Scope) error {
	return autoConvert_v1alpha1_Metric_To_experiment_Metric(in, out, s)
}

func autoConvert_experiment_Metric_To_v1alpha1_Metric(in *experiment.Metric, out *Metric, s conversion.Scope) error {
	out.Name = in.Name
	out.Minimize = in.Minimize
	out.Type = MetricType(in.Type)
	out.Query = in.Query
	out.ErrorQuery = in.ErrorQuery
	out.Scheme = in.Scheme
	out.Selector = in.Selector
	out.Port = in.Port
	out.Path = in.Path
	return nil
}

// Convert_experiment_Metric_To_v1alpha1_Metric is an autogenerated conversion function.
func Convert_experiment_Metric_To_v1alpha1_Metric(in *experiment.Metric, out *Metric, s conversion.Scope) error {
	return autoConvert_experiment_Metric_To_v1alpha1_Metric(in, out, s)
}

func autoConvert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec(in *NamespaceTemplateSpec, out *experiment.NamespaceTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Spec = in.Spec
	return nil
}

// Convert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec is an autogenerated conversion function.
func Convert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec(in *NamespaceTemplateSpec, out *experiment.NamespaceTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_NamespaceTemplateSpec_To_experiment_NamespaceTemplateSpec(in, out, s)
}

func autoConvert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in *experiment.NamespaceTemplateSpec, out *NamespaceTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Spec = in.Spec
	return nil
}

// Convert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec is an autogenerated conversion function.
func Convert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in *experiment.NamespaceTemplateSpec, out *NamespaceTemplateSpec, s conversion.Scope) error {
	return autoConvert_experiment_NamespaceTemplateSpec_To_v1alpha1_NamespaceTemplateSpec(in, out, s)
}

func autoConvert_v1alpha1_Optimization_To_experiment_Optimization(in *Optimization, out *experiment.Optimization, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1alpha1_Optimization_To_experiment_Optimization is an autogenerated conversion function.
func Convert_v1alpha1_Optimization_To_experiment_Optimization(in *Optimization, out *experiment.Optimization, s conversion.Scope) error {
	return autoConvert_v1alpha1_Optimization_To_experiment_Optimization(in, out, s)
}

func autoConvert_experiment_Optimization_To_v1alpha1_Optimization(in *experiment.Optimization, out *Optimization, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_experiment_Optimization_To_v1alpha1_Optimization is an autogenerated conversion function.
func Convert_experiment_Optimization_To_v1alpha1_Optimization(in *experiment.Optimization, out *Optimization, s conversion.Scope) error {
	return autoConvert_experiment_Optimization_To_v1alpha1_Optimization(in, out, s)
}

func autoConvert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint(in *OrderConstraint, out *experiment.OrderConstraint, s conversion.Scope) error {
	out.LowerParameter = in.LowerParameter
	out.UpperParameter = in.UpperParameter
	return nil
}

// Convert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint is an autogenerated conversion function.
func Convert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint(in *OrderConstraint, out *experiment.OrderConstraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_OrderConstraint_To_experiment_OrderConstraint(in, out, s)
}

func autoConvert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint(in *experiment.OrderConstraint, out *OrderConstraint, s conversion.Scope) error {
	out.LowerParameter = in.LowerParameter
	out.UpperParameter = in.UpperParameter
	return nil
}

// Convert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint is an autogenerated conversion function.
func Convert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint(in *experiment.OrderConstraint, out *OrderConstraint, s conversion.Scope) error {
	return autoConvert_experiment_OrderConstraint_To_v1alpha1_OrderConstraint(in, out, s)
}

func autoConvert_v1alpha1_Parameter_To_experiment_Parameter(in *Parameter, out *experiment.Parameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Min = in.Min
	out.Max = in.Max
	return nil
}

// Convert_v1alpha1_Parameter_To_experiment_Parameter is an autogenerated conversion function.
func Convert_v1alpha1_Parameter_To_experiment_Parameter(in *Parameter, out *experiment.Parameter, s conversion.Scope) error {
	return autoConvert_v1alpha1_Parameter_To_experiment_Parameter(in, out, s)
}

func autoConvert_experiment_Parameter_To_v1alpha1_Parameter(in *experiment.Parameter, out *Parameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Min = in.Min
	out.Max = in.Max
	return nil
}

// Convert_experiment_Parameter_To_v1alpha1_Parameter is an autogenerated conversion function.
func Convert_experiment_Parameter_To_v1alpha1_Parameter(in *experiment.Parameter, out *Parameter, s conversion.Scope) error {
	return autoConvert_experiment_Parameter_To_v1alpha1_Parameter(in, out, s)
}

func autoConvert_v1alpha1_ParameterSelector_To_trial_ParameterSelector(in *ParameterSelector, out *trial.ParameterSelector, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

// Convert_v1alpha1_ParameterSelector_To_trial_ParameterSelector is an autogenerated conversion function.
func Convert_v1alpha1_ParameterSelector_To_trial_ParameterSelector(in *ParameterSelector, out *trial.ParameterSelector, s conversion.Scope) error {
	return autoConvert_v1alpha1_ParameterSelector_To_trial_ParameterSelector(in, out, s)
}

func autoConvert_trial_ParameterSelector_To_v1alpha1_ParameterSelector(in *trial.ParameterSelector, out *ParameterSelector, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

// Convert_trial_ParameterSelector_To_v1alpha1_ParameterSelector is an autogenerated conversion function.
func Convert_trial_ParameterSelector_To_v1alpha1_ParameterSelector(in *trial.ParameterSelector, out *ParameterSelector, s conversion.Scope) error {
	return autoConvert_trial_ParameterSelector_To_v1alpha1_ParameterSelector(in, out, s)
}

func autoConvert_v1alpha1_PatchOperation_To_trial_PatchOperation(in *PatchOperation, out *trial.PatchOperation, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.PatchType = types.PatchType(in.PatchType)
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Data, &out.Data, s); err != nil {
		return err
	}
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1alpha1_PatchOperation_To_trial_PatchOperation is an autogenerated conversion function.
func Convert_v1alpha1_PatchOperation_To_trial_PatchOperation(in *PatchOperation, out *trial.PatchOperation, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchOperation_To_trial_PatchOperation(in, out, s)
}

func autoConvert_trial_PatchOperation_To_v1alpha1_PatchOperation(in *trial.PatchOperation, out *PatchOperation, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.PatchType = types.PatchType(in.PatchType)
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Data, &out.Data, s); err != nil {
		return err
	}
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_trial_PatchOperation_To_v1alpha1_PatchOperation is an autogenerated conversion function.
func Convert_trial_PatchOperation_To_v1alpha1_PatchOperation(in *trial.PatchOperation, out *PatchOperation, s conversion.Scope) error {
	return autoConvert_trial_PatchOperation_To_v1alpha1_PatchOperation(in, out, s)
}

func autoConvert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate(in *PatchReadinessGate, out *experiment.PatchReadinessGate, s conversion.Scope) error {
	out.ConditionType = in.ConditionType
	return nil
}

// Convert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate is an autogenerated conversion function.
func Convert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate(in *PatchReadinessGate, out *experiment.PatchReadinessGate, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate(in, out, s)
}

func autoConvert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in *experiment.PatchReadinessGate, out *PatchReadinessGate, s conversion.Scope) error {
	out.ConditionType = in.ConditionType
	return nil
}

// Convert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate is an autogenerated conversion function.
func Convert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in *experiment.PatchReadinessGate, out *PatchReadinessGate, s conversion.Scope) error {
	return autoConvert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(in, out, s)
}

func autoConvert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate(in *PatchTemplate, out *experiment.PatchTemplate, s conversion.Scope) error {
	out.Type = experiment.PatchType(in.Type)
	out.Patch = in.Patch
	out.TargetRef = in.TargetRef
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]experiment.PatchReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PatchReadinessGate_To_experiment_PatchReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	return nil
}

// Convert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate is an autogenerated conversion function.
func Convert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate(in *PatchTemplate, out *experiment.PatchTemplate, s conversion.Scope) error {
	return autoConvert_v1alpha1_PatchTemplate_To_experiment_PatchTemplate(in, out, s)
}

func autoConvert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate(in *experiment.PatchTemplate, out *PatchTemplate, s conversion.Scope) error {
	out.Type = PatchType(in.Type)
	out.Patch = in.Patch
	out.TargetRef = in.TargetRef
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]PatchReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_experiment_PatchReadinessGate_To_v1alpha1_PatchReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	return nil
}

// Convert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate is an autogenerated conversion function.
func Convert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate(in *experiment.PatchTemplate, out *PatchTemplate, s conversion.Scope) error {
	return autoConvert_experiment_PatchTemplate_To_v1alpha1_PatchTemplate(in, out, s)
}

func autoConvert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck(in *ReadinessCheck, out *trial.ReadinessCheck, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.AttemptsRemaining = in.AttemptsRemaining
	out.LastCheckTime = in.LastCheckTime
	return nil
}

// Convert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck is an autogenerated conversion function.
func Convert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck(in *ReadinessCheck, out *trial.ReadinessCheck, s conversion.Scope) error {
	return autoConvert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck(in, out, s)
}

func autoConvert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck(in *trial.ReadinessCheck, out *ReadinessCheck, s conversion.Scope) error {
	out.TargetRef = in.TargetRef
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.AttemptsRemaining = in.AttemptsRemaining
	out.LastCheckTime = in.LastCheckTime
	return nil
}

// Convert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck is an autogenerated conversion function.
func Convert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck(in *trial.ReadinessCheck, out *ReadinessCheck, s conversion.Scope) error {
	return autoConvert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck(in, out, s)
}

func autoConvert_v1alpha1_SetupTask_To_trial_SetupTask(in *SetupTask, out *trial.SetupTask, s conversion.Scope) error {
	out.Name = in.Name
	out.Image = in.Image
	out.SkipCreate = in.SkipCreate
	out.SkipDelete = in.SkipDelete
	out.VolumeMounts = in.VolumeMounts
	out.HelmChart = in.HelmChart
	out.HelmChartVersion = in.HelmChartVersion
	if in.HelmValues != nil {
		in, out := &in.HelmValues, &out.HelmValues
		*out = make([]trial.HelmValue, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_HelmValue_To_trial_HelmValue(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValues = nil
	}
	if in.HelmValuesFrom != nil {
		in, out := &in.HelmValuesFrom, &out.HelmValuesFrom
		*out = make([]trial.HelmValuesFromSource, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_HelmValuesFromSource_To_trial_HelmValuesFromSource(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValuesFrom = nil
	}
	return nil
}

// Convert_v1alpha1_SetupTask_To_trial_SetupTask is an autogenerated conversion function.
func Convert_v1alpha1_SetupTask_To_trial_SetupTask(in *SetupTask, out *trial.SetupTask, s conversion.Scope) error {
	return autoConvert_v1alpha1_SetupTask_To_trial_SetupTask(in, out, s)
}

func autoConvert_trial_SetupTask_To_v1alpha1_SetupTask(in *trial.SetupTask, out *SetupTask, s conversion.Scope) error {
	out.Name = in.Name
	out.Image = in.Image
	out.SkipCreate = in.SkipCreate
	out.SkipDelete = in.SkipDelete
	out.VolumeMounts = in.VolumeMounts
	out.HelmChart = in.HelmChart
	out.HelmChartVersion = in.HelmChartVersion
	if in.HelmValues != nil {
		in, out := &in.HelmValues, &out.HelmValues
		*out = make([]HelmValue, len(*in))
		for i := range *in {
			if err := Convert_trial_HelmValue_To_v1alpha1_HelmValue(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValues = nil
	}
	if in.HelmValuesFrom != nil {
		in, out := &in.HelmValuesFrom, &out.HelmValuesFrom
		*out = make([]HelmValuesFromSource, len(*in))
		for i := range *in {
			if err := Convert_trial_HelmValuesFromSource_To_v1alpha1_HelmValuesFromSource(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.HelmValuesFrom = nil
	}
	return nil
}

// Convert_trial_SetupTask_To_v1alpha1_SetupTask is an autogenerated conversion function.
func Convert_trial_SetupTask_To_v1alpha1_SetupTask(in *trial.SetupTask, out *SetupTask, s conversion.Scope) error {
	return autoConvert_trial_SetupTask_To_v1alpha1_SetupTask(in, out, s)
}

func autoConvert_v1alpha1_SumConstraint_To_experiment_SumConstraint(in *SumConstraint, out *experiment.SumConstraint, s conversion.Scope) error {
	out.Bound = in.Bound
	out.IsUpperBound = in.IsUpperBound
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]experiment.SumConstraintParameter, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	return nil
}

// Convert_v1alpha1_SumConstraint_To_experiment_SumConstraint is an autogenerated conversion function.
func Convert_v1alpha1_SumConstraint_To_experiment_SumConstraint(in *SumConstraint, out *experiment.SumConstraint, s conversion.Scope) error {
	return autoConvert_v1alpha1_SumConstraint_To_experiment_SumConstraint(in, out, s)
}

func autoConvert_experiment_SumConstraint_To_v1alpha1_SumConstraint(in *experiment.SumConstraint, out *SumConstraint, s conversion.Scope) error {
	out.Bound = in.Bound
	out.IsUpperBound = in.IsUpperBound
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]SumConstraintParameter, len(*in))
		for i := range *in {
			if err := Convert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Parameters = nil
	}
	return nil
}

// Convert_experiment_SumConstraint_To_v1alpha1_SumConstraint is an autogenerated conversion function.
func Convert_experiment_SumConstraint_To_v1alpha1_SumConstraint(in *experiment.SumConstraint, out *SumConstraint, s conversion.Scope) error {
	return autoConvert_experiment_SumConstraint_To_v1alpha1_SumConstraint(in, out, s)
}

func autoConvert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter(in *SumConstraintParameter, out *experiment.SumConstraintParameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Weight = in.Weight
	return nil
}

// Convert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter is an autogenerated conversion function.
func Convert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter(in *SumConstraintParameter, out *experiment.SumConstraintParameter, s conversion.Scope) error {
	return autoConvert_v1alpha1_SumConstraintParameter_To_experiment_SumConstraintParameter(in, out, s)
}

func autoConvert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in *experiment.SumConstraintParameter, out *SumConstraintParameter, s conversion.Scope) error {
	out.Name = in.Name
	out.Weight = in.Weight
	return nil
}

// Convert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter is an autogenerated conversion function.
func Convert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in *experiment.SumConstraintParameter, out *SumConstraintParameter, s conversion.Scope) error {
	return autoConvert_experiment_SumConstraintParameter_To_v1alpha1_SumConstraintParameter(in, out, s)
}

func autoConvert_v1alpha1_TrialCondition_To_trial_TrialCondition(in *TrialCondition, out *trial.TrialCondition, s conversion.Scope) error {
	out.Type = trial.TrialConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_v1alpha1_TrialCondition_To_trial_TrialCondition is an autogenerated conversion function.
func Convert_v1alpha1_TrialCondition_To_trial_TrialCondition(in *TrialCondition, out *trial.TrialCondition, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialCondition_To_trial_TrialCondition(in, out, s)
}

func autoConvert_trial_TrialCondition_To_v1alpha1_TrialCondition(in *trial.TrialCondition, out *TrialCondition, s conversion.Scope) error {
	out.Type = TrialConditionType(in.Type)
	out.Status = v1.ConditionStatus(in.Status)
	out.LastProbeTime = in.LastProbeTime
	out.LastTransitionTime = in.LastTransitionTime
	out.Reason = in.Reason
	out.Message = in.Message
	return nil
}

// Convert_trial_TrialCondition_To_v1alpha1_TrialCondition is an autogenerated conversion function.
func Convert_trial_TrialCondition_To_v1alpha1_TrialCondition(in *trial.TrialCondition, out *TrialCondition, s conversion.Scope) error {
	return autoConvert_trial_TrialCondition_To_v1alpha1_TrialCondition(in, out, s)
}

func autoConvert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate(in *TrialReadinessGate, out *trial.TrialReadinessGate, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Name = in.Name
	out.APIVersion = in.APIVersion
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.FailureThreshold = in.FailureThreshold
	return nil
}

// Convert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate is an autogenerated conversion function.
func Convert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate(in *TrialReadinessGate, out *trial.TrialReadinessGate, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate(in, out, s)
}

func autoConvert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in *trial.TrialReadinessGate, out *TrialReadinessGate, s conversion.Scope) error {
	out.Kind = in.Kind
	out.Name = in.Name
	out.APIVersion = in.APIVersion
	out.Selector = in.Selector
	out.ConditionTypes = in.ConditionTypes
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.PeriodSeconds = in.PeriodSeconds
	out.FailureThreshold = in.FailureThreshold
	return nil
}

// Convert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate is an autogenerated conversion function.
func Convert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in *trial.TrialReadinessGate, out *TrialReadinessGate, s conversion.Scope) error {
	return autoConvert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(in, out, s)
}

func autoConvert_v1alpha1_TrialSpec_To_trial_TrialSpec(in *TrialSpec, out *trial.TrialSpec, s conversion.Scope) error {
	out.ExperimentRef = in.ExperimentRef
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]trial.Assignment, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Assignment_To_trial_Assignment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Assignments = nil
	}
	out.Selector = in.Selector
	out.Template = in.Template
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.StartTimeOffset = in.StartTimeOffset
	out.ApproximateRuntime = in.ApproximateRuntime
	out.TTLSecondsAfterFinished = in.TTLSecondsAfterFinished
	out.TTLSecondsAfterFailure = in.TTLSecondsAfterFailure
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]trial.TrialReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_TrialReadinessGate_To_trial_TrialReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	if in.PatchOperations != nil {
		in, out := &in.PatchOperations, &out.PatchOperations
		*out = make([]trial.PatchOperation, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PatchOperation_To_trial_PatchOperation(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.PatchOperations = nil
	}
	if in.ReadinessChecks != nil {
		in, out := &in.ReadinessChecks, &out.ReadinessChecks
		*out = make([]trial.ReadinessCheck, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ReadinessCheck_To_trial_ReadinessCheck(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessChecks = nil
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]trial.Value, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Value_To_trial_Value(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Values = nil
	}
	if in.SetupTasks != nil {
		in, out := &in.SetupTasks, &out.SetupTasks
		*out = make([]trial.SetupTask, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_SetupTask_To_trial_SetupTask(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SetupTasks = nil
	}
	out.SetupVolumes = in.SetupVolumes
	out.SetupServiceAccountName = in.SetupServiceAccountName
	out.SetupDefaultClusterRole = in.SetupDefaultClusterRole
	out.SetupDefaultRules = in.SetupDefaultRules
	return nil
}

// Convert_v1alpha1_TrialSpec_To_trial_TrialSpec is an autogenerated conversion function.
func Convert_v1alpha1_TrialSpec_To_trial_TrialSpec(in *TrialSpec, out *trial.TrialSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialSpec_To_trial_TrialSpec(in, out, s)
}

func autoConvert_trial_TrialSpec_To_v1alpha1_TrialSpec(in *trial.TrialSpec, out *TrialSpec, s conversion.Scope) error {
	out.ExperimentRef = in.ExperimentRef
	if in.Assignments != nil {
		in, out := &in.Assignments, &out.Assignments
		*out = make([]Assignment, len(*in))
		for i := range *in {
			if err := Convert_trial_Assignment_To_v1alpha1_Assignment(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Assignments = nil
	}
	out.Selector = in.Selector
	out.Template = in.Template
	out.InitialDelaySeconds = in.InitialDelaySeconds
	out.StartTimeOffset = in.StartTimeOffset
	out.ApproximateRuntime = in.ApproximateRuntime
	out.TTLSecondsAfterFinished = in.TTLSecondsAfterFinished
	out.TTLSecondsAfterFailure = in.TTLSecondsAfterFailure
	if in.ReadinessGates != nil {
		in, out := &in.ReadinessGates, &out.ReadinessGates
		*out = make([]TrialReadinessGate, len(*in))
		for i := range *in {
			if err := Convert_trial_TrialReadinessGate_To_v1alpha1_TrialReadinessGate(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessGates = nil
	}
	if in.PatchOperations != nil {
		in, out := &in.PatchOperations, &out.PatchOperations
		*out = make([]PatchOperation, len(*in))
		for i := range *in {
			if err := Convert_trial_PatchOperation_To_v1alpha1_PatchOperation(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.PatchOperations = nil
	}
	if in.ReadinessChecks != nil {
		in, out := &in.ReadinessChecks, &out.ReadinessChecks
		*out = make([]ReadinessCheck, len(*in))
		for i := range *in {
			if err := Convert_trial_ReadinessCheck_To_v1alpha1_ReadinessCheck(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.ReadinessChecks = nil
	}
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]Value, len(*in))
		for i := range *in {
			if err := Convert_trial_Value_To_v1alpha1_Value(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Values = nil
	}
	if in.SetupTasks != nil {
		in, out := &in.SetupTasks, &out.SetupTasks
		*out = make([]SetupTask, len(*in))
		for i := range *in {
			if err := Convert_trial_SetupTask_To_v1alpha1_SetupTask(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SetupTasks = nil
	}
	out.SetupVolumes = in.SetupVolumes
	out.SetupServiceAccountName = in.SetupServiceAccountName
	out.SetupDefaultClusterRole = in.SetupDefaultClusterRole
	out.SetupDefaultRules = in.SetupDefaultRules
	return nil
}

// Convert_trial_TrialSpec_To_v1alpha1_TrialSpec is an autogenerated conversion function.
func Convert_trial_TrialSpec_To_v1alpha1_TrialSpec(in *trial.TrialSpec, out *TrialSpec, s conversion.Scope) error {
	return autoConvert_trial_TrialSpec_To_v1alpha1_TrialSpec(in, out, s)
}

func autoConvert_v1alpha1_TrialStatus_To_trial_TrialStatus(in *TrialStatus, out *trial.TrialStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.Assignments = in.Assignments
	out.Values = in.Values
	out.StartTime = in.StartTime
	out.CompletionTime = in.CompletionTime
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]trial.TrialCondition, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_TrialCondition_To_trial_TrialCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

// Convert_v1alpha1_TrialStatus_To_trial_TrialStatus is an autogenerated conversion function.
func Convert_v1alpha1_TrialStatus_To_trial_TrialStatus(in *TrialStatus, out *trial.TrialStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialStatus_To_trial_TrialStatus(in, out, s)
}

func autoConvert_trial_TrialStatus_To_v1alpha1_TrialStatus(in *trial.TrialStatus, out *TrialStatus, s conversion.Scope) error {
	out.Phase = in.Phase
	out.Assignments = in.Assignments
	out.Values = in.Values
	out.StartTime = in.StartTime
	out.CompletionTime = in.CompletionTime
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]TrialCondition, len(*in))
		for i := range *in {
			if err := Convert_trial_TrialCondition_To_v1alpha1_TrialCondition(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Conditions = nil
	}
	return nil
}

// Convert_trial_TrialStatus_To_v1alpha1_TrialStatus is an autogenerated conversion function.
func Convert_trial_TrialStatus_To_v1alpha1_TrialStatus(in *trial.TrialStatus, out *TrialStatus, s conversion.Scope) error {
	return autoConvert_trial_TrialStatus_To_v1alpha1_TrialStatus(in, out, s)
}

func autoConvert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec(in *TrialTemplateSpec, out *experiment.TrialTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_TrialSpec_To_trial_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec is an autogenerated conversion function.
func Convert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec(in *TrialTemplateSpec, out *experiment.TrialTemplateSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_TrialTemplateSpec_To_experiment_TrialTemplateSpec(in, out, s)
}

func autoConvert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in *experiment.TrialTemplateSpec, out *TrialTemplateSpec, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_trial_TrialSpec_To_v1alpha1_TrialSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec is an autogenerated conversion function.
func Convert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in *experiment.TrialTemplateSpec, out *TrialTemplateSpec, s conversion.Scope) error {
	return autoConvert_experiment_TrialTemplateSpec_To_v1alpha1_TrialTemplateSpec(in, out, s)
}

func autoConvert_v1alpha1_Value_To_trial_Value(in *Value, out *trial.Value, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	out.Error = in.Error
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_v1alpha1_Value_To_trial_Value is an autogenerated conversion function.
func Convert_v1alpha1_Value_To_trial_Value(in *Value, out *trial.Value, s conversion.Scope) error {
	return autoConvert_v1alpha1_Value_To_trial_Value(in, out, s)
}

func autoConvert_trial_Value_To_v1alpha1_Value(in *trial.Value, out *Value, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	out.Error = in.Error
	out.AttemptsRemaining = in.AttemptsRemaining
	return nil
}

// Convert_trial_Value_To_v1alpha1_Value is an autogenerated conversion function.
func Convert_trial_Value_To_v1alpha1_Value(in *trial.Value, out *Value, s conversion.Scope) error {
	return autoConvert_trial_Value_To_v1alpha1_Value(in, out, s)
}
