name: Pull Request workflow
on:
  pull_request:
    branches:
      - master
jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Verify License Header
        uses: talos-systems/conform@v0.1.0-alpha.19
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.14'
      - name: Cache Go Modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Go Cache
        uses: actions/cache@v1
        with:
          path: ~/.cache
          key: ${{ runner.os }}-gotestcache-${{ hashFiles('**.go') }}
          restore-keys: |
            ${{ runner.os }}-gotestcache-
      - name: Run tests
        run: |
          hack/install_kustomize.sh
          make test
      - name: Verify docs have been generated
        run: |
          make generate-docs
          # Need to do this to clear up delta with regenerating the docs
          # since we rm -r docs
          git update-index --refresh
          git diff-files --exit-code
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      BUILD_METADATA: pr.${{ github.run_number }}
      GIT_COMMIT: ${{ github.sha }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Unshallow
        run: git fetch --prune --unshallow
      # Launch KinD early so we can do other things while the control plane converges
      - name: KinD (Kubernetes in Docker) Initialization
        uses: helm/kind-action@v1.0.0
        with:
          version: v0.9.0
          wait: 0s
      - name: Set up Google Cloud Platform
        if: github.event.pull_request.head.repo.fork == false
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        with:
          service_account_email: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          project_id: redskyops
      - name: Bootstrap
        run: |
          TAG="sha-$(git rev-parse --short HEAD)"
          echo "IMG=gcr.io/redskyops/redskyops-controller:${TAG}" >> $GITHUB_ENV
          echo "REDSKYCTL_IMG=gcr.io/redskyops/redskyctl:${TAG}" >> $GITHUB_ENV
          echo "SETUPTOOLS_IMG=gcr.io/redskyops/setuptools:${TAG}" >> $GITHUB_ENV
          echo "PULL_POLICY=" >> $GITHUB_ENV
          echo "DOCKER_TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
      - name: Cache Go Modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Go Cache
        uses: actions/cache@v1
        with:
          path: ~/.cache
          key: ${{ runner.os }}-gobuildcache-${{ hashFiles('**.go') }}
          restore-keys: |
            ${{ runner.os }}-gobuildcache-
      - name: Build controller
        run: |
          hack/install_kustomize.sh
          make docker-build-ci
      - name: Build tool
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --skip-sign --rm-dist
      - name: Tag Docker images
        run: |
          docker tag "${IMG}" "${IMG%%:*}:${DOCKER_TAG}"
          docker tag "${REDSKYCTL_IMG}" "${REDSKYCTL_IMG%%:*}:${DOCKER_TAG}"
          docker tag "${SETUPTOOLS_IMG}" "${SETUPTOOLS_IMG%%:*}:${DOCKER_TAG}"
      - name: Push Docker images
        if: github.event.pull_request.head.repo.fork == false
        run: |
          gcloud --quiet auth configure-docker
          make docker-push
          docker push "${IMG%%:*}:${DOCKER_TAG}"
          docker push "${REDSKYCTL_IMG%%:*}:${DOCKER_TAG}"
          docker push "${SETUPTOOLS_IMG%%:*}:${DOCKER_TAG}"
      - name: Upload macOS binary
        uses: actions/upload-artifact@v2
        with:
          name: redskyctl_darwin_amd64
          path: dist/redskyctl-darwin-amd64.tar.gz
      - name: Upload Linux binary
        uses: actions/upload-artifact@v2
        with:
          name: redskyctl_linux_amd64
          path: dist/redskyctl-linux-amd64.tar.gz
      - name: redsky quickstart
        run: |
          hack/integration.sh
