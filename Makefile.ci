# Image URL to use all building/pushing image targets
IMG ?= controller:latest
REDSKYCTL_IMG ?= redskyctl:latest
SETUPTOOLS_IMG ?= setuptools:latest
CACHE_IMG ?= redskycache:latest
PULL_POLICY ?= IfNotPresent
# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)
CRD_OPTIONS ?= "crd:trivialVersions=true,maxDescLen=0"

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

# Collect version information
VERSION ?= $(shell git ls-remote --tags --refs origin 'v*' | tail -1 | awk -F/ '{ print $$3 }')-next
BUILD_METADATA ?=
GIT_COMMIT ?= $(shell git rev-parse HEAD)

# Define linker flags
LDFLAGS += -X github.com/redskyops/redskyops-controller/internal/version.Version=${VERSION}
LDFLAGS += -X github.com/redskyops/redskyops-controller/internal/version.BuildMetadata=${BUILD_METADATA}
LDFLAGS += -X github.com/redskyops/redskyops-controller/internal/version.GitCommit=${GIT_COMMIT}
LDFLAGS += -X github.com/redskyops/redskyops-controller/internal/setup.Image=${SETUPTOOLS_IMG}
LDFLAGS += -X github.com/redskyops/redskyops-controller/internal/setup.ImagePullPolicy=${PULL_POLICY}

#DOCKER_PLATFORMS ?= linux/amd64,linux/arm/v7,linux/arm64
DOCKER_PLATFORMS ?= linux/amd64

all: manager tool

# Run tests
test: fmt vet
	go test ./... --race -coverprofile cover.out

# Build tool binary using GoReleaser in a local dev environment (in CI we just invoke GoReleaser directly)
tool:
	BUILD_METADATA=${BUILD_METADATA} SETUPTOOLS_IMG=${SETUPTOOLS_IMG} PULL_POLICY=${PULL_POLICY} REDSKYCTL_IMG=${REDSKYCTL_IMG} \
	goreleaser release --snapshot --skip-sign --rm-dist

# Run go fmt against code
fmt:
	go fmt ./...

# Run go vet against code
vet:
	go vet ./...

# Build the docker images
docker-build:
	docker buildx build \
		--target test \
		--cache-to=type=local,dest=controllercache \
		--cache-from=type=local,src=controllercache \
		--platform ${DOCKER_PLATFORMS}   \
		--build-arg VERSION='${VERSION}' \
		--output "type=image,push=false" \
		.
	docker buildx build \
		--target builder \
		--cache-to=type=local,dest=controllercache \
		--cache-from=type=local,src=controllercache \
		--platform ${DOCKER_PLATFORMS}   \
		--build-arg LDFLAGS='${LDFLAGS}' \
		--build-arg VERSION='${VERSION}' \
		--output "type=image,push=false" \
    --tag ${IMG} \
		.
	docker buildx build \
		--cache-to=type=local,dest=toolscache \
		--cache-from=type=local,src=toolscache \
		--build-arg VERSION='${VERSION}' \
		--build-arg IMG='${IMG}'         \
		--output "type=image,push=false" \
    --tag ${SETUPTOOLS_IMG} \
		config

# Push the docker images
docker-push:
	docker buildx build \
		--target builder \
		--cache-to=type=local,dest=dockercache \
		--cache-from=type=local,src=dockercache \
		--platform ${DOCKER_PLATFORMS}   \
		--build-arg LDFLAGS='${LDFLAGS}' \
		--build-arg VERSION='${VERSION}' \
		--output "type=image,push=true" \
    --tag ${IMG} \
		.
	docker buildx build \
		--cache-to=type=local,dest=dockercache \
		--cache-from=type=local,src=dockercache \
		--build-arg VERSION='${VERSION}' \
		--build-arg IMG='${IMG}'         \
		--output "type=image,push=true" \
    --tag ${SETUPTOOLS_IMG} \
		config

# Generate CLI and API documentation
generate-docs:
	rm -rf docs/redskyctl docs/api
	go run -ldflags '$(LDFLAGS)' redskyctl/main.go docs --directory docs/redskyctl
	go run -ldflags '$(LDFLAGS)' redskyctl/main.go docs --directory docs/api --doc-type api
